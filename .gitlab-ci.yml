default:
  image: docker.sift.net/jharwell/rcppsw/ubuntu-22.04:latest

before_script:
  # Run minimal bootstrap to get TICPP
  - git clone https://gitlab-deploy-token:${BOOTSTRAP_DEPLOY_TOKEN}@git.sift.net/jharwell/bootstrap.git
  - cd bootstrap
  - ./bootstrap.sh
    --rprefix=/usr/local
    --sysprefix=/usr/local
    --rroot=.
    --disablerepo rcsw
    --disablerepo rcppsw
    --disablerepo cosm
    --disablerepo fordyca
    --disablerepo argos
    --disablerepo sierra
    --disablerepo titerra
    --force

  - cd ..

    # Install RCSW so RCPPSW can find it
  - git clone https://oauth2:${JHARWELL_CI_TOKEN}@git.sift.net/jharwell/rcsw.git
  - cd rcsw
  - git checkout devel
  - git submodule set-url libra ../libra.git
  - git submodule sync --recursive
  - git submodule foreach --recursive git fetch
  - git submodule update --init
  - mkdir build && cd build
  - cmake
    -DCMAKE_INSTALL_PREFIX=/usr/local
    -DLIBRA_DEPS_PREFIX=/usr/local
    -DCMAKE_BUILD_TYPE=DEV
    ..

  - JOBS=$(nproc)
  - make -j${JOBS} install
  - cd ../../

  # Install RCPPSW so COSM can find it
  - git clone https://oauth2:${JHARWELL_CI_TOKEN}@git.sift.net/jharwell/rcppsw.git
  - cd rcppsw
  - git checkout devel
  - git submodule set-url libra ../libra.git
  - git submodule sync --recursive
  - git submodule foreach --recursive git fetch
  - git submodule update --init
  - mkdir build && cd build
  - cmake
    -DCMAKE_INSTALL_PREFIX=/usr/local
    -DLIBRA_DEPS_PREFIX=/usr/local
    -DCMAKE_BUILD_TYPE=DEV
    -DLIBRA_ER=ALL
    ..

  - make -j${JOBS} install
  - cd ../..

# If all tests pass, deploy.
stages:
  - build-and-test
  - package-and-deploy

################################################################################
# Job to build and run tests
################################################################################
build-and-test:
  tags:
    - docker
  stage: build-and-test
  parallel:
    matrix:
      - COSM_BUILD_FOR:
          - ARGOS_FOOTBOT
          - ARGOS_DRONE

  script:
    # Build COSM
    - git submodule set-url libra ../libra.git
    - git submodule sync --recursive
    - git submodule foreach --recursive git fetch
    - git submodule update --init

    - mkdir -p build && cd build

    - cmake
      -DCMAKE_INSTALL_PREFIX=/usr/local
      -DLIBRA_DEPS_PREFIX=/usr/local
      -DCMAKE_BUILD_TYPE=DEV
      -DCOSM_BUILD_FOR=${COSM_BUILD_FOR}
      -DLIBRA_ER=ALL
      ..

    - make -j$(nproc)

################################################################################
# Jobs to build and upload packages
################################################################################
package-and-deploy:
  stage: package-and-deploy
  parallel:
  tags:
    - docker

  only:
    - master
    - devel

  script:
    - git submodule set-url libra ../libra.git
    - git submodule sync --recursive
    - git submodule foreach --recursive git fetch
    - git submodule update --init

    - mkdir -p build && cd build

    # Metadata for packaging
    - JOBS=$(nproc)
    - VERSION_MAJOR=$(sed -nE 's/.*PROJECT_VERSION_MAJOR ([0-9]+).*/\1/p' ../cmake/project-local.cmake)
    - VERSION_MINOR=$(sed -nE 's/.*PROJECT_VERSION_MINOR ([0-9]+).*/\1/p' ../cmake/project-local.cmake)
    - VERSION_PATCH=$(sed -nE 's/.*PROJECT_VERSION_PATCH ([0-9]+).*/\1/p' ../cmake/project-local.cmake)
    - PACKAGE_VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/COSM/${PACKAGE_VERSION}"

    # Build for ARGoS foot-bot and create packages
    - cmake
      -DCMAKE_INSTALL_PREFIX=/usr/local
      -DLIBRA_DEPS_PREFIX=/usr/local
      -DCOSM_BUILD_FOR=ARGOS_FOOTBOT
      -DLIBRA_ER=ALL
      ..

    - make -j${JOBS}
    - make package

    # Upload ARGoS foot-bot packages
    - ARGOS_FOOTBOT_DEB=$(ls cosm-argos-footbot*.deb)
    - ARGOS_FOOTBOT_TGZ=$(ls cosm-argos-footbot*.tar.gz)
    - |
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARGOS_FOOTBOT_DEB} ${PACKAGE_REGISTRY_URL}/${ARGOS_FOOTBOT_DEB}
    - |
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARGOS_FOOTBOT_TGZ} ${PACKAGE_REGISTRY_URL}/${ARGOS_FOOTBOT_TGZ}

    # Build for ARGoS drone and create packages
    - cmake
      -DCMAKE_INSTALL_PREFIX=/usr/local
      -DLIBRA_DEPS_PREFIX=/usr/local
      -DCOSM_BUILD_FOR=ARGOS_DRONE
      -DLIBRA_ER=ALL
      ..

    - make -j${JOBS}
    - make package

    # Upload ARGoS drone packages
    - ARGOS_DRONE_DEB=$(ls cosm-argos-drone*.deb)
    - ARGOS_DRONE_TGZ=$(ls cosm-argos-drone*.tar.gz)
    - |
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARGOS_DRONE_DEB} ${PACKAGE_REGISTRY_URL}/${ARGOS_DRONE_DEB}
    - |
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARGOS_DRONE_TGZ} ${PACKAGE_REGISTRY_URL}/${ARGOS_DRONE_TGZ}


    # Push tag (after building to make double sure we only ever push stuff that
    # at least builds)
    - BETA_TAG_VERSION=${PACKAGE_VERSION}.beta
    - BETA_TAG_MESSAGE="Development release ${BETA_TAG_VERSION}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git remote set-url origin https://oauth2:${JHARWELL_CI_TOKEN}@git.sift.net/${CI_PROJECT_PATH}
    - git tag $BETA_TAG_VERSION -m "${BETA_TAG_MESSAGE}"
    - git push -o ci.skip origin ${BETA_TAG_VERSION} # don't trigger another run

    # Create the release
    - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - release-cli
      create
      --name ${BETA_TAG_VERSION}
      --tag-name ${BETA_TAG_VERSION}
      --description "${BETA_TAG_MESSAGE}"
      --assets-link "{\"name\":\"${ARGOS_FOOTBOT_DEB}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARGOS_FOOTBOT_DEB}\"}"
      --assets-link "{\"name\":\"${ARGOS_FOOTBOT_TGZ}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARGOS_FOOTBOT_TGZ}\"}"
      --assets-link "{\"name\":\"${ARGOS_DRONE_DEB}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARGOS_DRONE_DEB}\"}"
      --assets-link "{\"name\":\"${ARGOS_DRONE_TGZ}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARGOS_DRONE_TGZ}\"}"

################################################################################
# Job to build documentation
################################################################################
pages:
  stage: package-and-deploy
  tags:
    - docker

  only:
    - master
    - devel

  script:
    - git submodule set-url libra ../libra.git
    - git submodule sync --recursive
    - git submodule foreach --recursive git fetch
    - git submodule update --init

    - mkdir -p build && cd build

    - cmake
      -DCMAKE_INSTALL_PREFIX=/usr/local
      -DCOSM_BUILD_FOR=ARGOS_FOOTBOT
      ..

    - make apidoc

    - cd ..
    - export PATH=$PATH:$HOME/.local/bin

    - cd docs && make html && cd ..
    - cp -r docs/_build/html/ ./public/

  artifacts:
    paths:
      - public
